1) Открыть GitBash и зайти в ветку main
  cd gitbash

2) Убедиться, что все файлы с внешнего репозитория обновлены
  git status (нет красных файлов для команды git add)

3) Проверить количество веток
  git branch (терминал даёт ответ * main, где слово main выделено зелёным цветом, это означает, что ветка main единственная, и мы сейчас на ней находимся)

4) Создать новую ветку
  git branch payments

5) Снова проверить количество веток
  git branch (терминал выдаёт ответ: * main (выделено зелёным цветом)
                                     payments (выделено белым цветом))
  Эо означает, что у нас теперь есть 2 ветки, но мы по-прежнему находимся на ветке main.

6) Создать ещё одну ветку и сразу зайти в неё
  git checkout -b ad (где -b надстройка для попадению в ветку сразу после её создания; ad - это название ветки)
  
7) Снова проверить количество веток
  git branch (ерминал выдаёт ответ: * ad (выделено зелёным цветом)
                                    main (выделено белым цветом)
                                    payments (выделено белым цветом)
  Это означает, что мы находимся на ветке ad.

8) Создать новый текстовый файл и написать в нём несколько строк
  cat > images.txt (откроется текстовый редактор в самом терминале)
  Пишем строки: img_1
                img_2
                img_3
  CTRL+C - сохранить и выйти из текстового редактора
  
9) Добавить файл images.txt на внешний репозиторий
  git add images.txt
  git commit -m "add images"
  
ТАКИМ ОБРАЗОМ, МЫ КОММИТНУЛИ ФАЙЛ images.txt, И ЭТОТ ФАЙЛ СУЩЕСТВУЕТ ТОЛЬКО НА ВЕТКЕ AD (НА MAIN И PAYMENTS ЭТОГО ФАЙЛА НЕТ)
  
10) Слиять (вмёржить) ветки main и ad
  git checkout main (сначала переходим на ту ветку, куда мы будем вливать изменения)
  git merge ad -m "merge_ad (затем пишем название ветки, с которой будем вливать изменения, где ad - это название ветки, -m - это message)

ТЕПЕРЬ ВЕТКИ MAIN И AD АБСОЛЮТНО ИДЕНТИЧНЫ, ПОТОМУ ЧТО МЫ ИХ СЛИЯЛИ

#gitbash #github #gitbranch
