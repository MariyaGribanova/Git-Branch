Для начала работы с этим файлом, должны быть выполнены все пункты из файла "1. Работа с ветками на GitBash":
https://github.com/MariyaGribanova/Git_Branch/blob/1716e5ce9b239747e89e4231beae9561287d5256/1.%20%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%D1%81%20%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8%20%D0%BD%D0%B0%20GitBash

1) Открыть GitBash перейти на ветку main
  cd gitbash
  git branch (проверили, что мы на ветке main, если мы на находимся на другой ветке, переключиться через git checkout main)

2) Зайти в файл images.txt и отредактировать его
  vim images.txt (откроется текстовый редактор в отдельном окне)
  i (откроется режим редактирования файла, добавить в файл новую строку "img_4"
  ESC:wq - сохранить и выйти из редактора vim
  
ТАКИМ ОБРАЗОМ МЫ ВНЕСЛИ ИЗМЕНЕНИЯ В ФАЙЛ images.txt ТОЛЬКО НА ВЕТКЕ MAIN, НА ВЕТКЕ AD ДАННЫЙ ФАЙЛ ОСТЛСЯ БЕЗ ИЗМЕНЕНИЙ, ПОКА МЫ НЕ ПРОВЕЛИ GIT MERGE
  
3) Закоммитить новую версию файла images.txt
  git commit -m "add 4'th img"

4) Перейти на ветку ad, где хранится первая версия файла images.txt
  git checkout ad
  
5) Зайти в файл images.txt и отредактировать его, но не аналогично пункту 2
  vim images.txt (откроется текстовый редактор в отдельном окне)
  i (откроется режим редактирования файла, добавить в файл новую строку "img_44"
  ESC:wq - сохранить и выйти из редактора vim
  
ПОЛУЧАЕТСЯ, СЕЙЧАС НА РАЗНЫХ ВЕТКАХ В ОДНОМ И ТОМ ЖЕ ФАЙЛЕ В ОДНОМ И ТОМ ЖЕ МЕСТЕ РАЗНАЯ ИНФОРМАЦИЯ (ПРИ MERGE ЭТО СОЗДАСТ КОНФЛИКТ)

6) Закоммитить новую версию файла images.txt с ветки ad
  git commit -am "add img_44" (в данном случае используется надстройка -am, т.к. файл images.txt уже проходил однажды через add и commit,
                               поэтому нам не нужно делать git add images.txt, достаточно просто использовать надстройку -am)
                              
7) Перейти на ветку main
  git checkout main

8) Сделать новое слияние веток main и ad
  git merge ad -m "merge_ad_2"
ПОЯВЛЯЕТСЯ СООБЩЕНИЕ О КОНФЛИКТЕ:
"Auto-merging images.txt
CONFLICT (content): Merge conflict in images.txt
Automatic merge failed; fix conflicts and then commit the result."

9) Перейти в vim images.txt и прочесть файл:
  1) img_1
  2) img_2
  3) img_3
  <<<<<<<< HEAD
  4) img_4 (указание на то, что в ветке main вот такая информация)
  ========
  4) img_44 (указание на то, что в ветке ad другая информация, и она не совпадает с веткой main)
  >>>>>>>> ad
  
РЕШЕНИЕ КОНФЛИКТА
 
i - вызываем редактирование файла в vim и "резолвим" конфликт (т.е. предлагаем своё решение данной ситуации)
  1) img_1
  2) img_2
  3) img_3
  4) img_4 (оставляем как есть)
  5) img_44 заменяем на img_5
  Все лишние знаки из файла необходимо убрать
ESC:wq - сохранить и выйти из редактора vim

10. То, что мы изменили, необходимо закоммитить
  git commit -am "resolve conflict"

КОНФЛИКТ РЕШЕН (resolve conflict)
НО НЕ ЗАБЫВАЕМ, ЧТО ВСЁ ВЫШЕОПИСАННОЕ МЫ ДЕЛАЛИ ЛОКАЛЬНО
